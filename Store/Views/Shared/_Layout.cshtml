@using Store.Models
@using Store.Security
@using Store.Services

@inject IDataManager Service
@{
    var countProducts = 0;
    var isAuthenticated = UserPrincipal.Current != null && UserPrincipal.Current.IsAuthenticated;
    var brands = Service.BrandRepository.GetAll().Take(5).Select(x => new BrandModel { Name = x.Name, BrandId = x.Id });
    if (isAuthenticated)
    {
        var user = Service.UserRepository.GetById(UserPrincipal.Current.UserId);
        var basket = user.Orders?.FirstOrDefault(o => o.StateId == 1);
        if (basket != null)
        {
            countProducts = basket.Product2Orders.Sum(x => x.ProductCount);
        }
    }
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <base href="~/" />
    <link rel="stylesheet" href="index.css">
    <script type="text/javascript" src="dist/jquery-3.3.1.min.js"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.14.0/jquery.validate.min.js"
            asp-fallback-src="~/lib/jquery-validation/dist/jquery.validate.min.js"
            asp-fallback-test="window.jQuery && window.jQuery.validator">
    </script>
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.validation.unobtrusive/3.2.6/jquery.validate.unobtrusive.min.js"
            asp-fallback-src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"
            asp-fallback-test="window.jQuery && window.jQuery.validator && window.jQuery.validator.unobtrusive">
    </script>
</head>
<body>
    <header>
        <div class="auth">
            <img src="images/avatar_male_250x250.png" class="profile">
            @if (!isAuthenticated)
            {
                <a href="javascript: login()">Вход</a>
                <span id="login"></span>
                <span> / </span>
                <a href="javascript: register()">Регистрация</a>
                <span id="register"></span>
            }
            else
            {
                <a href="">@UserPrincipal.Current.Name</a>
            }
        </div>
    </header>
    <div class="logo">
        <a href="@Url.Action("Index", "Home")">
            <img class="main-logo" src="images/23020996.png">
        </a>
        <form id="form" autocomplete="off">
            <div class="autocomplete">
                <input type="text" class="search" id="myInput" placeholder="Поиск товара">
                <input class="submit" value type="submit">
            </div>
        </form>
        <div class="cart-container">
            <a class="cart"></a>
            <span class="cost">@(countProducts != 0 ? $"Товаров {countProducts}" : "Нет товаров")</span>
        </div>
    </div>
    <nav class="menu-container">
        <ul class="menu">
            <li class="catalog"><a><img src="/images/catalog.png">Каталог товаров<img src="/images/catalog-arrow.png"></a></li>
            @foreach (var brand in brands)
            {
                <li><a href="@Url.Action("GetProductsByBrand", "Product", new {id = brand.BrandId})">@brand.Name</a></li>
            }
        </ul>
    </nav>
    @RenderBody()
    @RenderSection("scripts", false)
    <footer>
        <div class="left">©2018</div>
        <div class="right">Цены в розничных магазинах могут отличаться от цен, указанных на сайте.</div>
    </footer>
    <script>
        function login() {
            $.ajax({
                url: "@Url.Action("Login", "Account")",
                type: "GET",
                success: function (data) {
                    $("#login").empty();
                    $("#login").html(data);
                },
                error: function () {
                    $("#login").empty();
                }
            });
        }
        function register() {
            $.ajax({
                url: "@Url.Action("Register", "Account")",
                type: "GET",
                success: function (data) {
                    $("#register").empty();
                    $("#register").html(data);
                },
                error: function () {
                    $("#register").empty();
                }
            });
        }

        function redPopup(text) {
            popup(text, "#f38d8d");
        }

        function greenPopup(text) {
            popup(text, "#8df38e");
        }

        function popup(text, color) {
            $(".popup").remove();
            $("body").append("<div class=\"popup\">" + text + "</div>");
            $(".popup").css({ 'background-color': color });
            setTimeout(function() {
                $(".popup").fadeOut()}, 2000);
        }

        function autocomplete(inp) {
            var currentFocus;
            inp.addEventListener("input", function (e) {
                var a, b, i, val = this.value;
                closeAllLists();
                if (!val || val.length < 3) { return false; }
                currentFocus = -1;
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                this.parentNode.appendChild(a);
                var arr;
                $.when(
                    $.ajax({
                        url: "/Product/SearchProductName?name=" + val,
                        type: "GET",
                        success: function (json) {
                            console.log(json);
                            arr = json.data;
                        },
                        error: function () {

                        }
                    })).then(function () {
                        console.log(arr);
                        for (i = 0; i < arr.length; i++) {
                            item = document.createElement("a");
                            var currentUrl = document.createElement("div");
                            item.href = "@Url.Action("GetProduct", "Product")?id=" + arr[i].id;
                            currentUrl.innerHTML = "<strong>" + arr[i].name.substring(0, val.length) + "</strong>";
                            currentUrl.innerHTML += arr[i].name.substring(val.length);
                            currentUrl.innerHTML += "<input type='hidden' value='" + arr[i].name + "'>";
                            currentUrl.addEventListener("click",
                                function (e) {
                                    inp.value = this.getElementsByTagName("input")[0].value;
                                    closeAllLists();
                                });
                            item.appendChild(currentUrl);
                            a.appendChild(item);

                        }
                    });
            });

            inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode === 40) {
                    currentFocus++;
                    addActive(x);
                } else if (e.keyCode === 38) {
                    currentFocus--;
                    addActive(x);
                } else if (e.keyCode === 13) {
                    e.preventDefault();
                    if (currentFocus > -1) {
                        if (x) x[currentFocus].click();
                    }
                }
            });
            function addActive(x) {
                if (!x) return false;
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                x[currentFocus].classList.add("autocomplete-active");
            }
            function removeActive(x) {
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }
            function closeAllLists(elmnt) {
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt !== x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }

            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }
        autocomplete(document.getElementById("myInput"));
    </script>
</body>
</html>